name: MeChat React CI/CD

on:
  push:
    branches: [ "**" ] 
  pull_request:
    branches: [ "**" ]

jobs:
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies using npm ci
        run: npm ci

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      # Uncomment this if you have tests set up
      # - name: Run tests
      #   run: npm test -- --watchAll=false

  build:
    name: Build Production App
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Fix Browserslist warning
        run: npx update-browserslist-db@latest --update-db

      - name: Build React application
        run: npm run build

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: build

  deploy:
    name: Deploy to IIS Server
    runs-on: windows-latest
    needs: build
    #if: github.ref == 'refs/heads/main' # Only deploy when push to main

    steps:
      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: build

      - name: Deploy build to IIS via WinRM
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_DEPLOY_FOLDER: ${{ secrets.VM_DEPLOY_FOLDER }}
        run: |
          # Allow unencrypted WinRM and add remote server to trusted hosts
          Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$env:VM_HOST" -Force

          # Create remote PowerShell session
          $secpasswd = ConvertTo-SecureString "$env:VM_PASSWORD" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:VM_USERNAME, $secpasswd)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic

          # Create deployment folder if not exists
          Invoke-Command -Session $session -ScriptBlock {
            param($path)
            New-Item -Path $path -ItemType Directory -Force
          } -ArgumentList $env:VM_DEPLOY_FOLDER

          # Copy React build files to the remote IIS folder
          Copy-Item -Path ".\build\*" -Destination $env:VM_DEPLOY_FOLDER -Recurse -Force -ToSession $session

          # Optional: Restart IIS
          Invoke-Command -Session $session -ScriptBlock {
            iisreset
          }

          # Remove session
          Remove-PSSession $session
